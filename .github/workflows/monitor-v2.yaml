name: Monitor Jobs Execution Time

on:
  workflow_call:
    inputs:
      app:
        description: 'Application'
        required: true
        type: string
      job-name:
        description: 'Job Name to Monitor'
        required: true
        type: string
      env:
        description: 'Environment'
        required: true
        type: string
      runs-on:
        required: false
        type: string
        default: ubuntu-latest

jobs:
  monitor:
    name: Monitor Execution Time
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Set up datediff
        run: |
          sudo apt install dateutils -y
      
      - name: Get Job Execution time
        run: |        
          echo "job_started_at=$(curl \
          --url https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs \
          --header "Authorization: Bearer ${{ github.token }}" \
          --header "content-type: application/json" | jq -c '.jobs[] | select(.name == "${{ inputs.job-name }}")' | jq .started_at)" >> $GITHUB_ENV

          echo "job_completed_at=$(curl \
          --url https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs \
          --header "Authorization: Bearer ${{ github.token }}" \
          --header "content-type: application/json" | jq -c '.jobs[] | select(.name == "${{ inputs.job-name }}")' | jq .completed_at)" >> $GITHUB_ENV

          source $GITHUB_ENV
          echo "duration_sec=$(/usr/bin/dateutils.ddiff -i '%Y-%m-%dT%H:%M:%SZ' $job_started_at $job_completed_at)" >> $GITHUB_ENV

          source $GITHUB_ENV
          echo "duration_sec_time=$(echo $duration_sec | sed 's/s//')" >> $GITHUB_ENV

          source $GITHUB_ENV
          echo "duration=$(totalSeconds=${{ env.duration_sec_time }};
          seconds=$((totalSeconds%60));
          minutes=$((totalSeconds/60%60));
          hours=$((totalSeconds/60/60%24));
          days=$((totalSeconds/60/60/24));
          (( $days > 0 )) && printf '%dd'$days;
          (( $hours > 0 )) && printf '%dh' $hours;
          (( $minutes > 0 )) && printf '%dm' $minutes;
          (( $days > 0 || $hours > 0 || $minutes > 0 )) && printf '%ds' $seconds;)" >> $GITHUB_ENV

          source $GITHUB_ENV
          if [ -z ${{ env.duration }} ]; then 
            echo "duration=$duration_sec" >> $GITHUB_ENV
            echo "estou no if"
          fi
          
          source $GITHUB_ENV
          echo "Execution time: $duration"

      - name: Send execution time to New Relic
        run: |
          API_HOST=https://insights-collector.newrelic.com
          API_ENDPOINT=$API_HOST/v1/accounts/${{ secrets.NEW_RELIC_ACCOUNT_ID }}/events

          timestamp=$(date +%s)

          JSON_STRING=$( jq -n \
              --arg metric "${{ inputs.job-name }}" \
              --arg value "${{ env.duration }}" \
              --arg timestamp "${timestamp}" \
              --arg app "${{ inputs.app }}" \
              --arg env "${{ inputs.env }}" \
          '{eventType: "Barecheck", metric: $metric, value: $value, application: $app, timestamp: $timestamp, environment: $env}' )

          echo "Sending Events..."
          echo $JSON_STRING

          result=$(echo $JSON_STRING  | gzip -c | \
              curl -vvv --data-binary @- -X POST \
              -H "Content-Type: application/json"\
              -H "X-Insert-Key: ${{ secrets.NEW_RELIC_INSERT_API_KEY }}" \
              -H "Content-Encoding: gzip" \
              $API_ENDPOINT
          )

          exitStatus=$?

          if [ $exitStatus -ne 0 ]; then
              echo "::error:: $result"
          fi